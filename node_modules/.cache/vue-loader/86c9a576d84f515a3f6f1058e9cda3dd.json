{"remainingRequest":"/Users/guohechuan/code/aurora/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/guohechuan/code/aurora/src/views/Inspiration/index.vue?vue&type=style&index=0&id=00cc67ba&lang=scss&scoped=true&","dependencies":[{"path":"/Users/guohechuan/code/aurora/src/views/Inspiration/index.vue","mtime":1626163653612},{"path":"/Users/guohechuan/code/aurora/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/guohechuan/code/aurora/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/guohechuan/code/aurora/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/guohechuan/code/aurora/node_modules/sass-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/guohechuan/code/aurora/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/guohechuan/code/aurora/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKQGltcG9ydCAnLi9pbmRleC5zY3NzJzsK"},{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4GA","file":"index.vue","sourceRoot":"src/views/Inspiration","sourcesContent":["<template>\n  <div id=\"inspiration\">\n    <Transition name=\"fade-transform\" mode=\"out-in\">\n      <div class=\"page\" v-if=\"inspiration.length\">\n        <Quote :quote=\"$config.inspirationOpts.qoute\" />\n        <div class=\"content\">\n          <Segment v-for=\"(item, i) in inspiration\" :key=\"item.number\" :title=\"item.date\" :color=\"colors[i]\">\n            <MarkDown :content=\"item.body\" />\n          </Segment>\n        </div>\n        <div class=\"btn-group\" v-if=\"!isDisabledPrev || !isDisabledNext\">\n          <Pagination\n            :loading=\"loading\"\n            :isDisabledPrev=\"isDisabledPrev\"\n            :isDisabledNext=\"isDisabledNext\"\n            @handlePage=\"queryInspiration\"\n          />\n        </div>\n      </div>\n      <Loading v-else />\n    </Transition>\n\n    <Comment v-if=\"$config.inspirationOpts.enableComment && initComment\" title=\"灵感\" />\n  </div>\n</template>\n\n<script>\nimport MarkDown from '@/components/MarkDown'\nimport Loading from '@/components/Loading'\nimport Pagination from '@/components/Pagination'\nimport Quote from '@/components/Quote'\nimport Segment from '@/components/Segment'\nimport Comment from '@/components/Comment'\nimport { shuffle } from '@/utils'\n\nexport default {\n  name: 'Inspiration',\n  components: {\n    MarkDown,\n    Loading,\n    Pagination,\n    Quote,\n    Segment,\n    Comment,\n  },\n  data() {\n    return {\n      loading: false,\n      initComment: false,\n      colors: shuffle(this.$config.themeColors),\n      totalCount: 0,\n      page: 0,\n      pageSize: 10,\n      inspiration: [],\n      list: [],\n    }\n  },\n  computed: {\n    maxPage() {\n      return Math.ceil(this.totalCount / this.pageSize)\n    },\n    isDisabledPrev() {\n      return this.page <= 1\n    },\n    isDisabledNext() {\n      return this.page >= this.maxPage\n    },\n  },\n  async created() {\n    this.totalCount = await this.$store.dispatch('queryInspirationCount')\n    await this.queryInspiration()\n    this.initComment = true\n  },\n  methods: {\n    async queryInspiration(type = 'next') {\n      if (this.loading) return\n      const queryPage = type === 'prev' ? this.page - 1 : this.page + 1\n      this.page = queryPage\n\n      if (this.list[queryPage]) {\n        this.scrollTop(() => {\n          this.inspiration = this.list[queryPage]\n        })\n        return\n      }\n\n      this.loading = true\n      const inspiration = await this.$store.dispatch('queryInspiration', {\n        page: queryPage,\n        pageSize: this.pageSize,\n      })\n      this.loading = false\n\n      this.scrollTop(() => {\n        this.inspiration = inspiration\n        this.list[queryPage] = inspiration\n      })\n    },\n    scrollTop(cb) {\n      window.scrollTo({ top: 0, behavior: 'smooth' })\n      const delayTime = this.$config.isMobile ? 800 : 600\n      setTimeout(cb, delayTime)\n    },\n  },\n}\n</script>\n\n<style lang=\"scss\" scoped>\n@import './index.scss';\n</style>\n"]}]}