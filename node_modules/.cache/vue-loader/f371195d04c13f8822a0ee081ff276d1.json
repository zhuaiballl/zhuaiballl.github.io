{"remainingRequest":"/Users/guohechuan/code/aurora/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/guohechuan/code/aurora/src/components/MarkDown/index.vue?vue&type=style&index=0&lang=scss&scope=true&","dependencies":[{"path":"/Users/guohechuan/code/aurora/src/components/MarkDown/index.vue","mtime":1626163653606},{"path":"/Users/guohechuan/code/aurora/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/guohechuan/code/aurora/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/guohechuan/code/aurora/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/guohechuan/code/aurora/node_modules/sass-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/guohechuan/code/aurora/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/guohechuan/code/aurora/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKQGltcG9ydCAnLi9pbmRleC5zY3NzJzsK"},{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuLA","file":"index.vue","sourceRoot":"src/components/MarkDown","sourcesContent":["<template>\n  <div class=\"markdown\" v-html=\"html\"></div>\n</template>\n\n<script>\nimport marked from 'marked'\nimport Zooming from 'zooming'\nimport ClipboardJS from 'clipboard'\nimport katex from 'katex'\nimport hljs from '@/assets/lib/highlight'\nimport { fileCDN, handleImg } from '@/utils'\n\nfunction mathsExpression(expr) {\n  if (expr.match(/^\\$\\$[\\s\\S]*\\$\\$$/)) {\n    expr = expr.substr(2, expr.length - 4)\n    return katex.renderToString(expr, { displayMode: true })\n  } else if (expr.match(/^\\$[\\s\\S]*\\$$/)) {\n    expr = expr.substr(1, expr.length - 2)\n    return katex.renderToString(expr, { isplayMode: false })\n  }\n}\n\nconst zooming = new Zooming({\n  bgOpacity: 0.8,\n  zIndex: 100,\n})\n\nlet IMG_ID = 0\nlet CODE_ID = 0\nconst CODE_COPY_LIST = []\n\nconst renderer = new marked.Renderer()\n\nrenderer.heading = function (text, level, raw, slugger) {\n  const icon = ['gift', 'pagelines', 'pilcrow'][level - 2]\n  return `<h${level} id=\"h-${slugger.slug(raw)}\"><i class=\"icon icon-${icon}\"></i>${text}</h${level}>`\n}\n\nrenderer.image = function (href, title, text) {\n  IMG_ID++\n  const id = `img-${IMG_ID}`\n  const cdnHref = fileCDN(href)\n\n  const img = new Image()\n  img.src = cdnHref\n  const compelete = (isSuccess) => {\n    const dom = document.getElementById(id)\n    dom.src = isSuccess ? cdnHref : href\n    dom.style.opacity = 1\n  }\n  img.onload = () => compelete(true)\n  img.onerror = () => compelete(false)\n\n  const { style, isFull } = handleImg(cdnHref)\n\n  return `<span class=\"img-box ${isFull ? 'full' : ''}\">\n  <span class=\"bg\" style=\"${style}\">\n    <span class=\"loading\">\n      <span class=\"dot\"></span><span class=\"dot\"></span><span class=\"dot\"></span><span class=\"dot\"></span><span class=\"dot\"></span>\n    </span>\n  </span>\n  <img id=\"${id}\" class=\"img-zoomable cursor\" style=\"${style}\"  loading=\"lazy\" alt=\"${text}\" />${\n    text ? `<span class=\"title\">◭ ${text}</span>` : ''\n  }</span>`\n}\n\nrenderer.table = function (header, body) {\n  if (body) body = `<tbody>${body}</tbody>`\n  return `<div class=\"table-wrapper\">\\n<table>\\n<thead>\\n${header}</thead>\\n${body}</table>\\n</div>\\n`\n}\n\nconst rendererCodespan = renderer.codespan\nrenderer.codespan = function (text) {\n  const math = mathsExpression(text)\n\n  if (math) {\n    return math\n  }\n\n  return rendererCodespan(text)\n}\n\nconst rendererCode = renderer.code\nrenderer.code = function code(_code, infostring, escaped) {\n  // katex 支持， https://github.com/markedjs/marked/issues/1538#issuecomment-526189561\n  if (!lang) {\n    const math = mathsExpression(_code)\n    if (math) {\n      return math\n    }\n  }\n\n  CODE_ID++\n  const id = `code-${CODE_ID}`\n  CODE_COPY_LIST.push({ id, code: _code })\n\n  const lang = (infostring || '').match(/\\S*/)[0]\n\n  if (this.options.highlight) {\n    const out = this.options.highlight(_code, lang)\n    if (out != null && out !== _code) {\n      escaped = true\n      _code = out\n    }\n  }\n\n  if (!lang) {\n    return `<pre><code>${_code}</code><i id=\"${id}\" class=\"icon icon-clipboard code-copy\"></i></pre>`\n  }\n\n  return `<pre><code class=\"${\n    this.options.langPrefix + lang\n  }\">${_code}</code><i id=\"${id}\" class=\"icon icon-clipboard code-copy\"></i></pre>\\n`\n}\n\nmarked.setOptions({\n  renderer,\n  highlight: (code) => hljs.highlightAuto(code).value,\n})\n\nexport default {\n  name: 'MarkDown',\n  props: {\n    content: {\n      type: String,\n      default: '',\n    },\n    target: {\n      type: String,\n      default: '',\n    },\n  },\n  data() {\n    return {\n      html: '',\n      clipboards: [],\n    }\n  },\n  created() {\n    this.marked()\n  },\n  watch: {\n    content() {\n      this.marked()\n    },\n  },\n  methods: {\n    marked() {\n      this.CODE_COPY_LIST = []\n      this.html = marked(this.content)\n\n      // 对于只是纯解析文字不需要代码高亮和灯箱\n      if (!this.target) return\n      this.$nextTick(() => {\n        hljs.initLineNumbersOnLoad({ target: this.target })\n        zooming.listen('.img-zoomable')\n        this.bindCodeCopy()\n      })\n    },\n    bindCodeCopy() {\n      CODE_COPY_LIST.forEach((o) => {\n        const clipboard = new ClipboardJS('#' + o.id, {\n          text(trigger) {\n            return o.code\n          },\n        })\n        this.clipboards.push(clipboard)\n      })\n    },\n    unBindCodeCopy() {\n      this.clipboards.forEach((o) => {\n        o.destroy()\n      })\n    },\n  },\n  beforeDestroy() {\n    zooming.close()\n    this.unBindCodeCopy()\n  },\n}\n</script>\n\n<style lang=\"scss\" scope>\n@import './index.scss';\n</style>\n"]}]}