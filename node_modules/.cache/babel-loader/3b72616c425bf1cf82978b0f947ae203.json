{"remainingRequest":"/Users/guohechuan/code/aurora/node_modules/babel-loader/lib/index.js!/Users/guohechuan/code/aurora/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/guohechuan/code/aurora/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/guohechuan/code/aurora/src/components/MarkDown/index.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/guohechuan/code/aurora/src/components/MarkDown/index.vue","mtime":1626163653606},{"path":"/Users/guohechuan/code/aurora/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/guohechuan/code/aurora/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/guohechuan/code/aurora/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/guohechuan/code/aurora/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuY29uY2F0IjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZm9yLWVhY2giOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5yZWdleHAuZXhlYyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5tYXRjaCI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL3dlYi5kb20tY29sbGVjdGlvbnMuZm9yLWVhY2giOwovLwovLwovLwovLwppbXBvcnQgX21hcmtlZCBmcm9tICdtYXJrZWQnOwppbXBvcnQgWm9vbWluZyBmcm9tICd6b29taW5nJzsKaW1wb3J0IENsaXBib2FyZEpTIGZyb20gJ2NsaXBib2FyZCc7CmltcG9ydCBrYXRleCBmcm9tICdrYXRleCc7CmltcG9ydCBobGpzIGZyb20gJ0AvYXNzZXRzL2xpYi9oaWdobGlnaHQnOwppbXBvcnQgeyBmaWxlQ0ROLCBoYW5kbGVJbWcgfSBmcm9tICdAL3V0aWxzJzsKCmZ1bmN0aW9uIG1hdGhzRXhwcmVzc2lvbihleHByKSB7CiAgaWYgKGV4cHIubWF0Y2goL15cJFwkW1xzXFNdKlwkXCQkLykpIHsKICAgIGV4cHIgPSBleHByLnN1YnN0cigyLCBleHByLmxlbmd0aCAtIDQpOwogICAgcmV0dXJuIGthdGV4LnJlbmRlclRvU3RyaW5nKGV4cHIsIHsKICAgICAgZGlzcGxheU1vZGU6IHRydWUKICAgIH0pOwogIH0gZWxzZSBpZiAoZXhwci5tYXRjaCgvXlwkW1xzXFNdKlwkJC8pKSB7CiAgICBleHByID0gZXhwci5zdWJzdHIoMSwgZXhwci5sZW5ndGggLSAyKTsKICAgIHJldHVybiBrYXRleC5yZW5kZXJUb1N0cmluZyhleHByLCB7CiAgICAgIGlzcGxheU1vZGU6IGZhbHNlCiAgICB9KTsKICB9Cn0KCnZhciB6b29taW5nID0gbmV3IFpvb21pbmcoewogIGJnT3BhY2l0eTogMC44LAogIHpJbmRleDogMTAwCn0pOwp2YXIgSU1HX0lEID0gMDsKdmFyIENPREVfSUQgPSAwOwp2YXIgQ09ERV9DT1BZX0xJU1QgPSBbXTsKdmFyIHJlbmRlcmVyID0gbmV3IF9tYXJrZWQuUmVuZGVyZXIoKTsKCnJlbmRlcmVyLmhlYWRpbmcgPSBmdW5jdGlvbiAodGV4dCwgbGV2ZWwsIHJhdywgc2x1Z2dlcikgewogIHZhciBpY29uID0gWydnaWZ0JywgJ3BhZ2VsaW5lcycsICdwaWxjcm93J11bbGV2ZWwgLSAyXTsKICByZXR1cm4gIjxoIi5jb25jYXQobGV2ZWwsICIgaWQ9XCJoLSIpLmNvbmNhdChzbHVnZ2VyLnNsdWcocmF3KSwgIlwiPjxpIGNsYXNzPVwiaWNvbiBpY29uLSIpLmNvbmNhdChpY29uLCAiXCI+PC9pPiIpLmNvbmNhdCh0ZXh0LCAiPC9oIikuY29uY2F0KGxldmVsLCAiPiIpOwp9OwoKcmVuZGVyZXIuaW1hZ2UgPSBmdW5jdGlvbiAoaHJlZiwgdGl0bGUsIHRleHQpIHsKICBJTUdfSUQrKzsKICB2YXIgaWQgPSAiaW1nLSIuY29uY2F0KElNR19JRCk7CiAgdmFyIGNkbkhyZWYgPSBmaWxlQ0ROKGhyZWYpOwogIHZhciBpbWcgPSBuZXcgSW1hZ2UoKTsKICBpbWcuc3JjID0gY2RuSHJlZjsKCiAgdmFyIGNvbXBlbGV0ZSA9IGZ1bmN0aW9uIGNvbXBlbGV0ZShpc1N1Y2Nlc3MpIHsKICAgIHZhciBkb20gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChpZCk7CiAgICBkb20uc3JjID0gaXNTdWNjZXNzID8gY2RuSHJlZiA6IGhyZWY7CiAgICBkb20uc3R5bGUub3BhY2l0eSA9IDE7CiAgfTsKCiAgaW1nLm9ubG9hZCA9IGZ1bmN0aW9uICgpIHsKICAgIHJldHVybiBjb21wZWxldGUodHJ1ZSk7CiAgfTsKCiAgaW1nLm9uZXJyb3IgPSBmdW5jdGlvbiAoKSB7CiAgICByZXR1cm4gY29tcGVsZXRlKGZhbHNlKTsKICB9OwoKICB2YXIgX2hhbmRsZUltZyA9IGhhbmRsZUltZyhjZG5IcmVmKSwKICAgICAgc3R5bGUgPSBfaGFuZGxlSW1nLnN0eWxlLAogICAgICBpc0Z1bGwgPSBfaGFuZGxlSW1nLmlzRnVsbDsKCiAgcmV0dXJuICI8c3BhbiBjbGFzcz1cImltZy1ib3ggIi5jb25jYXQoaXNGdWxsID8gJ2Z1bGwnIDogJycsICJcIj5cbiAgPHNwYW4gY2xhc3M9XCJiZ1wiIHN0eWxlPVwiIikuY29uY2F0KHN0eWxlLCAiXCI+XG4gICAgPHNwYW4gY2xhc3M9XCJsb2FkaW5nXCI+XG4gICAgICA8c3BhbiBjbGFzcz1cImRvdFwiPjwvc3Bhbj48c3BhbiBjbGFzcz1cImRvdFwiPjwvc3Bhbj48c3BhbiBjbGFzcz1cImRvdFwiPjwvc3Bhbj48c3BhbiBjbGFzcz1cImRvdFwiPjwvc3Bhbj48c3BhbiBjbGFzcz1cImRvdFwiPjwvc3Bhbj5cbiAgICA8L3NwYW4+XG4gIDwvc3Bhbj5cbiAgPGltZyBpZD1cIiIpLmNvbmNhdChpZCwgIlwiIGNsYXNzPVwiaW1nLXpvb21hYmxlIGN1cnNvclwiIHN0eWxlPVwiIikuY29uY2F0KHN0eWxlLCAiXCIgIGxvYWRpbmc9XCJsYXp5XCIgYWx0PVwiIikuY29uY2F0KHRleHQsICJcIiAvPiIpLmNvbmNhdCh0ZXh0ID8gIjxzcGFuIGNsYXNzPVwidGl0bGVcIj5cdTI1RUQgIi5jb25jYXQodGV4dCwgIjwvc3Bhbj4iKSA6ICcnLCAiPC9zcGFuPiIpOwp9OwoKcmVuZGVyZXIudGFibGUgPSBmdW5jdGlvbiAoaGVhZGVyLCBib2R5KSB7CiAgaWYgKGJvZHkpIGJvZHkgPSAiPHRib2R5PiIuY29uY2F0KGJvZHksICI8L3Rib2R5PiIpOwogIHJldHVybiAiPGRpdiBjbGFzcz1cInRhYmxlLXdyYXBwZXJcIj5cbjx0YWJsZT5cbjx0aGVhZD5cbiIuY29uY2F0KGhlYWRlciwgIjwvdGhlYWQ+XG4iKS5jb25jYXQoYm9keSwgIjwvdGFibGU+XG48L2Rpdj5cbiIpOwp9OwoKdmFyIHJlbmRlcmVyQ29kZXNwYW4gPSByZW5kZXJlci5jb2Rlc3BhbjsKCnJlbmRlcmVyLmNvZGVzcGFuID0gZnVuY3Rpb24gKHRleHQpIHsKICB2YXIgbWF0aCA9IG1hdGhzRXhwcmVzc2lvbih0ZXh0KTsKCiAgaWYgKG1hdGgpIHsKICAgIHJldHVybiBtYXRoOwogIH0KCiAgcmV0dXJuIHJlbmRlcmVyQ29kZXNwYW4odGV4dCk7Cn07Cgp2YXIgcmVuZGVyZXJDb2RlID0gcmVuZGVyZXIuY29kZTsKCnJlbmRlcmVyLmNvZGUgPSBmdW5jdGlvbiBjb2RlKF9jb2RlLCBpbmZvc3RyaW5nLCBlc2NhcGVkKSB7CiAgLy8ga2F0ZXgg5pSv5oyB77yMIGh0dHBzOi8vZ2l0aHViLmNvbS9tYXJrZWRqcy9tYXJrZWQvaXNzdWVzLzE1MzgjaXNzdWVjb21tZW50LTUyNjE4OTU2MQogIGlmICghbGFuZykgewogICAgdmFyIG1hdGggPSBtYXRoc0V4cHJlc3Npb24oX2NvZGUpOwoKICAgIGlmIChtYXRoKSB7CiAgICAgIHJldHVybiBtYXRoOwogICAgfQogIH0KCiAgQ09ERV9JRCsrOwogIHZhciBpZCA9ICJjb2RlLSIuY29uY2F0KENPREVfSUQpOwogIENPREVfQ09QWV9MSVNULnB1c2goewogICAgaWQ6IGlkLAogICAgY29kZTogX2NvZGUKICB9KTsKICB2YXIgbGFuZyA9IChpbmZvc3RyaW5nIHx8ICcnKS5tYXRjaCgvXFMqLylbMF07CgogIGlmICh0aGlzLm9wdGlvbnMuaGlnaGxpZ2h0KSB7CiAgICB2YXIgb3V0ID0gdGhpcy5vcHRpb25zLmhpZ2hsaWdodChfY29kZSwgbGFuZyk7CgogICAgaWYgKG91dCAhPSBudWxsICYmIG91dCAhPT0gX2NvZGUpIHsKICAgICAgZXNjYXBlZCA9IHRydWU7CiAgICAgIF9jb2RlID0gb3V0OwogICAgfQogIH0KCiAgaWYgKCFsYW5nKSB7CiAgICByZXR1cm4gIjxwcmU+PGNvZGU+Ii5jb25jYXQoX2NvZGUsICI8L2NvZGU+PGkgaWQ9XCIiKS5jb25jYXQoaWQsICJcIiBjbGFzcz1cImljb24gaWNvbi1jbGlwYm9hcmQgY29kZS1jb3B5XCI+PC9pPjwvcHJlPiIpOwogIH0KCiAgcmV0dXJuICI8cHJlPjxjb2RlIGNsYXNzPVwiIi5jb25jYXQodGhpcy5vcHRpb25zLmxhbmdQcmVmaXggKyBsYW5nLCAiXCI+IikuY29uY2F0KF9jb2RlLCAiPC9jb2RlPjxpIGlkPVwiIikuY29uY2F0KGlkLCAiXCIgY2xhc3M9XCJpY29uIGljb24tY2xpcGJvYXJkIGNvZGUtY29weVwiPjwvaT48L3ByZT5cbiIpOwp9OwoKX21hcmtlZC5zZXRPcHRpb25zKHsKICByZW5kZXJlcjogcmVuZGVyZXIsCiAgaGlnaGxpZ2h0OiBmdW5jdGlvbiBoaWdobGlnaHQoY29kZSkgewogICAgcmV0dXJuIGhsanMuaGlnaGxpZ2h0QXV0byhjb2RlKS52YWx1ZTsKICB9Cn0pOwoKZXhwb3J0IGRlZmF1bHQgewogIG5hbWU6ICdNYXJrRG93bicsCiAgcHJvcHM6IHsKICAgIGNvbnRlbnQ6IHsKICAgICAgdHlwZTogU3RyaW5nLAogICAgICBkZWZhdWx0OiAnJwogICAgfSwKICAgIHRhcmdldDogewogICAgICB0eXBlOiBTdHJpbmcsCiAgICAgIGRlZmF1bHQ6ICcnCiAgICB9CiAgfSwKICBkYXRhOiBmdW5jdGlvbiBkYXRhKCkgewogICAgcmV0dXJuIHsKICAgICAgaHRtbDogJycsCiAgICAgIGNsaXBib2FyZHM6IFtdCiAgICB9OwogIH0sCiAgY3JlYXRlZDogZnVuY3Rpb24gY3JlYXRlZCgpIHsKICAgIHRoaXMubWFya2VkKCk7CiAgfSwKICB3YXRjaDogewogICAgY29udGVudDogZnVuY3Rpb24gY29udGVudCgpIHsKICAgICAgdGhpcy5tYXJrZWQoKTsKICAgIH0KICB9LAogIG1ldGhvZHM6IHsKICAgIG1hcmtlZDogZnVuY3Rpb24gbWFya2VkKCkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgdGhpcy5DT0RFX0NPUFlfTElTVCA9IFtdOwogICAgICB0aGlzLmh0bWwgPSBfbWFya2VkKHRoaXMuY29udGVudCk7IC8vIOWvueS6juWPquaYr+e6r+ino+aekOaWh+Wtl+S4jemcgOimgeS7o+eggemrmOS6ruWSjOeBr+eusQoKICAgICAgaWYgKCF0aGlzLnRhcmdldCkgcmV0dXJuOwogICAgICB0aGlzLiRuZXh0VGljayhmdW5jdGlvbiAoKSB7CiAgICAgICAgaGxqcy5pbml0TGluZU51bWJlcnNPbkxvYWQoewogICAgICAgICAgdGFyZ2V0OiBfdGhpcy50YXJnZXQKICAgICAgICB9KTsKICAgICAgICB6b29taW5nLmxpc3RlbignLmltZy16b29tYWJsZScpOwoKICAgICAgICBfdGhpcy5iaW5kQ29kZUNvcHkoKTsKICAgICAgfSk7CiAgICB9LAogICAgYmluZENvZGVDb3B5OiBmdW5jdGlvbiBiaW5kQ29kZUNvcHkoKSB7CiAgICAgIHZhciBfdGhpczIgPSB0aGlzOwoKICAgICAgQ09ERV9DT1BZX0xJU1QuZm9yRWFjaChmdW5jdGlvbiAobykgewogICAgICAgIHZhciBjbGlwYm9hcmQgPSBuZXcgQ2xpcGJvYXJkSlMoJyMnICsgby5pZCwgewogICAgICAgICAgdGV4dDogZnVuY3Rpb24gdGV4dCh0cmlnZ2VyKSB7CiAgICAgICAgICAgIHJldHVybiBvLmNvZGU7CiAgICAgICAgICB9CiAgICAgICAgfSk7CgogICAgICAgIF90aGlzMi5jbGlwYm9hcmRzLnB1c2goY2xpcGJvYXJkKTsKICAgICAgfSk7CiAgICB9LAogICAgdW5CaW5kQ29kZUNvcHk6IGZ1bmN0aW9uIHVuQmluZENvZGVDb3B5KCkgewogICAgICB0aGlzLmNsaXBib2FyZHMuZm9yRWFjaChmdW5jdGlvbiAobykgewogICAgICAgIG8uZGVzdHJveSgpOwogICAgICB9KTsKICAgIH0KICB9LAogIGJlZm9yZURlc3Ryb3k6IGZ1bmN0aW9uIGJlZm9yZURlc3Ryb3koKSB7CiAgICB6b29taW5nLmNsb3NlKCk7CiAgICB0aGlzLnVuQmluZENvZGVDb3B5KCk7CiAgfQp9Ow=="},{"version":3,"sources":["index.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"markdown\" v-html=\"html\"></div>\n</template>\n\n<script>\nimport marked from 'marked'\nimport Zooming from 'zooming'\nimport ClipboardJS from 'clipboard'\nimport katex from 'katex'\nimport hljs from '@/assets/lib/highlight'\nimport { fileCDN, handleImg } from '@/utils'\n\nfunction mathsExpression(expr) {\n  if (expr.match(/^\\$\\$[\\s\\S]*\\$\\$$/)) {\n    expr = expr.substr(2, expr.length - 4)\n    return katex.renderToString(expr, { displayMode: true })\n  } else if (expr.match(/^\\$[\\s\\S]*\\$$/)) {\n    expr = expr.substr(1, expr.length - 2)\n    return katex.renderToString(expr, { isplayMode: false })\n  }\n}\n\nconst zooming = new Zooming({\n  bgOpacity: 0.8,\n  zIndex: 100,\n})\n\nlet IMG_ID = 0\nlet CODE_ID = 0\nconst CODE_COPY_LIST = []\n\nconst renderer = new marked.Renderer()\n\nrenderer.heading = function (text, level, raw, slugger) {\n  const icon = ['gift', 'pagelines', 'pilcrow'][level - 2]\n  return `<h${level} id=\"h-${slugger.slug(raw)}\"><i class=\"icon icon-${icon}\"></i>${text}</h${level}>`\n}\n\nrenderer.image = function (href, title, text) {\n  IMG_ID++\n  const id = `img-${IMG_ID}`\n  const cdnHref = fileCDN(href)\n\n  const img = new Image()\n  img.src = cdnHref\n  const compelete = (isSuccess) => {\n    const dom = document.getElementById(id)\n    dom.src = isSuccess ? cdnHref : href\n    dom.style.opacity = 1\n  }\n  img.onload = () => compelete(true)\n  img.onerror = () => compelete(false)\n\n  const { style, isFull } = handleImg(cdnHref)\n\n  return `<span class=\"img-box ${isFull ? 'full' : ''}\">\n  <span class=\"bg\" style=\"${style}\">\n    <span class=\"loading\">\n      <span class=\"dot\"></span><span class=\"dot\"></span><span class=\"dot\"></span><span class=\"dot\"></span><span class=\"dot\"></span>\n    </span>\n  </span>\n  <img id=\"${id}\" class=\"img-zoomable cursor\" style=\"${style}\"  loading=\"lazy\" alt=\"${text}\" />${\n    text ? `<span class=\"title\">◭ ${text}</span>` : ''\n  }</span>`\n}\n\nrenderer.table = function (header, body) {\n  if (body) body = `<tbody>${body}</tbody>`\n  return `<div class=\"table-wrapper\">\\n<table>\\n<thead>\\n${header}</thead>\\n${body}</table>\\n</div>\\n`\n}\n\nconst rendererCodespan = renderer.codespan\nrenderer.codespan = function (text) {\n  const math = mathsExpression(text)\n\n  if (math) {\n    return math\n  }\n\n  return rendererCodespan(text)\n}\n\nconst rendererCode = renderer.code\nrenderer.code = function code(_code, infostring, escaped) {\n  // katex 支持， https://github.com/markedjs/marked/issues/1538#issuecomment-526189561\n  if (!lang) {\n    const math = mathsExpression(_code)\n    if (math) {\n      return math\n    }\n  }\n\n  CODE_ID++\n  const id = `code-${CODE_ID}`\n  CODE_COPY_LIST.push({ id, code: _code })\n\n  const lang = (infostring || '').match(/\\S*/)[0]\n\n  if (this.options.highlight) {\n    const out = this.options.highlight(_code, lang)\n    if (out != null && out !== _code) {\n      escaped = true\n      _code = out\n    }\n  }\n\n  if (!lang) {\n    return `<pre><code>${_code}</code><i id=\"${id}\" class=\"icon icon-clipboard code-copy\"></i></pre>`\n  }\n\n  return `<pre><code class=\"${\n    this.options.langPrefix + lang\n  }\">${_code}</code><i id=\"${id}\" class=\"icon icon-clipboard code-copy\"></i></pre>\\n`\n}\n\nmarked.setOptions({\n  renderer,\n  highlight: (code) => hljs.highlightAuto(code).value,\n})\n\nexport default {\n  name: 'MarkDown',\n  props: {\n    content: {\n      type: String,\n      default: '',\n    },\n    target: {\n      type: String,\n      default: '',\n    },\n  },\n  data() {\n    return {\n      html: '',\n      clipboards: [],\n    }\n  },\n  created() {\n    this.marked()\n  },\n  watch: {\n    content() {\n      this.marked()\n    },\n  },\n  methods: {\n    marked() {\n      this.CODE_COPY_LIST = []\n      this.html = marked(this.content)\n\n      // 对于只是纯解析文字不需要代码高亮和灯箱\n      if (!this.target) return\n      this.$nextTick(() => {\n        hljs.initLineNumbersOnLoad({ target: this.target })\n        zooming.listen('.img-zoomable')\n        this.bindCodeCopy()\n      })\n    },\n    bindCodeCopy() {\n      CODE_COPY_LIST.forEach((o) => {\n        const clipboard = new ClipboardJS('#' + o.id, {\n          text(trigger) {\n            return o.code\n          },\n        })\n        this.clipboards.push(clipboard)\n      })\n    },\n    unBindCodeCopy() {\n      this.clipboards.forEach((o) => {\n        o.destroy()\n      })\n    },\n  },\n  beforeDestroy() {\n    zooming.close()\n    this.unBindCodeCopy()\n  },\n}\n</script>\n\n<style lang=\"scss\" scope>\n@import './index.scss';\n</style>\n"],"sourceRoot":"src/components/MarkDown"}]}