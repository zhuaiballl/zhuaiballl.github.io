{"remainingRequest":"/Users/guohechuan/code/aurora/node_modules/thread-loader/dist/cjs.js!/Users/guohechuan/code/aurora/node_modules/babel-loader/lib/index.js!/Users/guohechuan/code/aurora/node_modules/eslint-loader/index.js??ref--13-0!/Users/guohechuan/code/aurora/src/assets/lib/linenumber.js","dependencies":[{"path":"/Users/guohechuan/code/aurora/src/assets/lib/linenumber.js","mtime":1626163653602},{"path":"/Users/guohechuan/code/aurora/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/guohechuan/code/aurora/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/guohechuan/code/aurora/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/guohechuan/code/aurora/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMucmVnZXhwLmV4ZWMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcubWF0Y2giOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcucmVwbGFjZSI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5zcGxpdCI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy50cmltIjsKaW1wb3J0IF90eXBlb2YgZnJvbSAiL1VzZXJzL2d1b2hlY2h1YW4vY29kZS9hdXJvcmEvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3R5cGVvZiI7CmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGxpbmVudW1iZXIoaGxqcykgewogIHZhciB3ID0gd2luZG93OwogIHZhciBkID0gZG9jdW1lbnQ7CiAgdmFyIFRBQkxFX05BTUUgPSAnaGxqcy1sbicsCiAgICAgIExJTkVfTkFNRSA9ICdobGpzLWxuLWxpbmUnLAogICAgICBDT0RFX0JMT0NLX05BTUUgPSAnaGxqcy1sbi1jb2RlJywKICAgICAgTlVNQkVSU19CTE9DS19OQU1FID0gJ2hsanMtbG4tbnVtYmVycycsCiAgICAgIE5VTUJFUl9MSU5FX05BTUUgPSAnaGxqcy1sbi1uJywKICAgICAgREFUQV9BVFRSX05BTUUgPSAnZGF0YS1saW5lLW51bWJlcicsCiAgICAgIEJSRUFLX0xJTkVfUkVHRVhQID0gL1xyXG58XHJ8XG4vZzsKICB3LmhsanMgPSBobGpzOwogIHcuaGxqcy5pbml0TGluZU51bWJlcnNPbkxvYWQgPSBpbml0TGluZU51bWJlcnNPbkxvYWQ7CiAgdy5obGpzLmxpbmVOdW1iZXJzQmxvY2sgPSBsaW5lTnVtYmVyc0Jsb2NrOwogIHcuaGxqcy5saW5lTnVtYmVyc1ZhbHVlID0gbGluZU51bWJlcnNWYWx1ZTsKICBhZGRTdHlsZXMoKTsKCiAgZnVuY3Rpb24gYWRkU3R5bGVzKCkgewogICAgdmFyIGNzcyA9IGQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTsKICAgIGNzcy50eXBlID0gJ3RleHQvY3NzJzsKICAgIGNzcy5pbm5lckhUTUwgPSBmb3JtYXQoJy57MH17Ym9yZGVyLWNvbGxhcHNlOmNvbGxhcHNlfScgKyAnLnsxfTpiZWZvcmV7Y29udGVudDphdHRyKHsyfSl9JywgW1RBQkxFX05BTUUsIE5VTUJFUl9MSU5FX05BTUUsIERBVEFfQVRUUl9OQU1FXSk7CiAgICBkLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdoZWFkJylbMF0uYXBwZW5kQ2hpbGQoY3NzKTsKICB9CgogIGZ1bmN0aW9uIGluaXRMaW5lTnVtYmVyc09uTG9hZChvcHRpb25zKSB7CiAgICB0cnkgewogICAgICB2YXIgdGFyZ2V0RWxlbWVudCA9IGQucXVlcnlTZWxlY3RvcihvcHRpb25zLnRhcmdldCk7CiAgICAgIHZhciBibG9ja3MgPSB0YXJnZXRFbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ2NvZGVbY2xhc3MqPSJsYW5ndWFnZS0iXScpOwoKICAgICAgZm9yICh2YXIgaSBpbiBibG9ja3MpIHsKICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGJsb2NrcywgaSkpIHsKICAgICAgICAgIGxpbmVOdW1iZXJzQmxvY2soYmxvY2tzW2ldLCBvcHRpb25zKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgdy5jb25zb2xlLmVycm9yKCdMaW5lTnVtYmVycyBlcnJvcjogJywgZSk7CiAgICB9CiAgfQoKICBmdW5jdGlvbiBsaW5lTnVtYmVyc0Jsb2NrKGVsZW1lbnQsIG9wdGlvbnMpIHsKICAgIGlmIChfdHlwZW9mKGVsZW1lbnQpICE9PSAnb2JqZWN0JykgcmV0dXJuOwogICAgYXN5bmMoZnVuY3Rpb24gKCkgewogICAgICBlbGVtZW50LmlubmVySFRNTCA9IGxpbmVOdW1iZXJzSW50ZXJuYWwoZWxlbWVudCwgb3B0aW9ucyk7CiAgICB9KTsKICB9CgogIGZ1bmN0aW9uIGxpbmVOdW1iZXJzVmFsdWUodmFsdWUsIG9wdGlvbnMpIHsKICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICdzdHJpbmcnKSByZXR1cm47CiAgICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NvZGUnKTsKICAgIGVsZW1lbnQuaW5uZXJIVE1MID0gdmFsdWU7CiAgICByZXR1cm4gbGluZU51bWJlcnNJbnRlcm5hbChlbGVtZW50LCBvcHRpb25zKTsKICB9CgogIGZ1bmN0aW9uIGxpbmVOdW1iZXJzSW50ZXJuYWwoZWxlbWVudCwgb3B0aW9ucykgewogICAgLy8gZGVmaW5lIG9wdGlvbnMgb3Igc2V0IGRlZmF1bHQKICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHsKICAgICAgc2luZ2xlTGluZTogZmFsc2UKICAgIH07IC8vIGNvbnZlcnQgb3B0aW9ucwoKICAgIHZhciBmaXJzdExpbmVJbmRleCA9IG9wdGlvbnMuc2luZ2xlTGluZSA/IDAgOiAxOwogICAgZHVwbGljYXRlTXVsdGlsaW5lTm9kZXMoZWxlbWVudCk7CiAgICByZXR1cm4gYWRkTGluZU51bWJlcnNCbG9ja0ZvcihlbGVtZW50LmlubmVySFRNTCwgZmlyc3RMaW5lSW5kZXgpOwogIH0KCiAgZnVuY3Rpb24gYWRkTGluZU51bWJlcnNCbG9ja0ZvcihpbnB1dEh0bWwsIGZpcnN0TGluZUluZGV4KSB7CiAgICB2YXIgbGluZXMgPSBnZXRMaW5lcyhpbnB1dEh0bWwpOyAvLyBpZiBsYXN0IGxpbmUgY29udGFpbnMgb25seSBjYXJyaWFnZSByZXR1cm4gcmVtb3ZlIGl0CgogICAgaWYgKGxpbmVzW2xpbmVzLmxlbmd0aCAtIDFdLnRyaW0oKSA9PT0gJycpIHsKICAgICAgbGluZXMucG9wKCk7CiAgICB9CgogICAgaWYgKGxpbmVzLmxlbmd0aCA+IGZpcnN0TGluZUluZGV4KSB7CiAgICAgIHZhciBodG1sID0gJyc7CgogICAgICBmb3IgKHZhciBpID0gMCwgbCA9IGxpbmVzLmxlbmd0aDsgaSA8IGw7IGkrKykgewogICAgICAgIGh0bWwgKz0gZm9ybWF0KCc8dHI+JyArICc8dGQgY2xhc3M9InswfSI+JyArICc8ZGl2IGNsYXNzPSJ7MX0gezJ9IiB7M309Ins1fSI+PC9kaXY+JyArICc8L3RkPicgKyAnPHRkIGNsYXNzPSJ7NH0iPicgKyAnPGRpdiBjbGFzcz0iezF9Ij57Nn08L2Rpdj4nICsgJzwvdGQ+JyArICc8L3RyPicsIFtOVU1CRVJTX0JMT0NLX05BTUUsIExJTkVfTkFNRSwgTlVNQkVSX0xJTkVfTkFNRSwgREFUQV9BVFRSX05BTUUsIENPREVfQkxPQ0tfTkFNRSwgaSArIDEsIGxpbmVzW2ldLmxlbmd0aCA+IDAgPyBsaW5lc1tpXSA6ICcgJ10pOwogICAgICB9CgogICAgICByZXR1cm4gZm9ybWF0KCc8dGFibGUgY2xhc3M9InswfSI+ezF9PC90YWJsZT4nLCBbVEFCTEVfTkFNRSwgaHRtbF0pOwogICAgfQoKICAgIHJldHVybiBpbnB1dEh0bWw7CiAgfQogIC8qKgogICAqIFJlY3Vyc2l2ZSBtZXRob2QgZm9yIGZpeCBtdWx0aS1saW5lIGVsZW1lbnRzIGltcGxlbWVudGF0aW9uIGluIGhpZ2hsaWdodC5qcwogICAqIERvaW5nIGRlZXAgcGFzc2FnZSBvbiBjaGlsZCBub2Rlcy4KICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbGVtZW50CiAgICovCgoKICBmdW5jdGlvbiBkdXBsaWNhdGVNdWx0aWxpbmVOb2RlcyhlbGVtZW50KSB7CiAgICB2YXIgbm9kZXMgPSBlbGVtZW50LmNoaWxkTm9kZXM7CgogICAgZm9yICh2YXIgbm9kZSBpbiBub2RlcykgewogICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG5vZGVzLCBub2RlKSkgewogICAgICAgIHZhciBjaGlsZCA9IG5vZGVzW25vZGVdOwoKICAgICAgICBpZiAoZ2V0TGluZXNDb3VudChjaGlsZC50ZXh0Q29udGVudCkgPiAwKSB7CiAgICAgICAgICBpZiAoY2hpbGQuY2hpbGROb2Rlcy5sZW5ndGggPiAwKSB7CiAgICAgICAgICAgIGR1cGxpY2F0ZU11bHRpbGluZU5vZGVzKGNoaWxkKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGR1cGxpY2F0ZU11bHRpbGluZU5vZGUoY2hpbGQucGFyZW50Tm9kZSk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgfQogIC8qKgogICAqIE1ldGhvZCBmb3IgZml4IG11bHRpLWxpbmUgZWxlbWVudHMgaW1wbGVtZW50YXRpb24gaW4gaGlnaGxpZ2h0LmpzCiAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZWxlbWVudAogICAqLwoKCiAgZnVuY3Rpb24gZHVwbGljYXRlTXVsdGlsaW5lTm9kZShlbGVtZW50KSB7CiAgICB2YXIgY2xhc3NOYW1lID0gZWxlbWVudC5jbGFzc05hbWU7CiAgICBpZiAoIS9obGpzLS8udGVzdChjbGFzc05hbWUpKSByZXR1cm47CiAgICB2YXIgbGluZXMgPSBnZXRMaW5lcyhlbGVtZW50LmlubmVySFRNTCk7CiAgICB2YXIgcmVzdWx0ID0gJyc7CgogICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaW5lcy5sZW5ndGg7IGkrKykgewogICAgICB2YXIgbGluZVRleHQgPSBsaW5lc1tpXS5sZW5ndGggPiAwID8gbGluZXNbaV0gOiAnICc7CiAgICAgIHJlc3VsdCArPSBmb3JtYXQoJzxzcGFuIGNsYXNzPSJ7MH0iPnsxfTwvc3Bhbj5cbicsIFtjbGFzc05hbWUsIGxpbmVUZXh0XSk7CiAgICB9CgogICAgZWxlbWVudC5pbm5lckhUTUwgPSByZXN1bHQudHJpbSgpOwogIH0KCiAgZnVuY3Rpb24gZ2V0TGluZXModGV4dCkgewogICAgaWYgKHRleHQubGVuZ3RoID09PSAwKSByZXR1cm4gW107CiAgICByZXR1cm4gdGV4dC5zcGxpdChCUkVBS19MSU5FX1JFR0VYUCk7CiAgfQoKICBmdW5jdGlvbiBnZXRMaW5lc0NvdW50KHRleHQpIHsKICAgIHJldHVybiAodGV4dC50cmltKCkubWF0Y2goQlJFQUtfTElORV9SRUdFWFApIHx8IFtdKS5sZW5ndGg7CiAgfQoKICBmdW5jdGlvbiBhc3luYyhmdW5jKSB7CiAgICB3LnNldFRpbWVvdXQoZnVuYywgMCk7CiAgfQogIC8qKgogICAqIHtAbGluayBodHRwczovL3djb2Rlci5naXRodWIuaW8vbm90ZXMvc3RyaW5nLWZvcm1hdC1mb3Itc3RyaW5nLWZvcm1hdGluZy1pbi1qYXZhc2NyaXB0fQogICAqIEBwYXJhbSB7c3RyaW5nfSBmb3JtYXQKICAgKiBAcGFyYW0ge2FycmF5fSBhcmdzCiAgICovCgoKICBmdW5jdGlvbiBmb3JtYXQoZm9ybWF0LCBhcmdzKSB7CiAgICByZXR1cm4gZm9ybWF0LnJlcGxhY2UoL1x7KFxkKylcfS9nLCBmdW5jdGlvbiAobSwgbikgewogICAgICByZXR1cm4gYXJnc1tuXSA/IGFyZ3Nbbl0gOiBtOwogICAgfSk7CiAgfQp9"},null]}