{"remainingRequest":"/Users/guohechuan/code/aurora/node_modules/thread-loader/dist/cjs.js!/Users/guohechuan/code/aurora/node_modules/babel-loader/lib/index.js!/Users/guohechuan/code/aurora/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/guohechuan/code/aurora/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/guohechuan/code/aurora/src/components/Panel/index.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/guohechuan/code/aurora/src/components/Panel/index.vue","mtime":1626163653607},{"path":"/Users/guohechuan/code/aurora/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/guohechuan/code/aurora/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/guohechuan/code/aurora/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/guohechuan/code/aurora/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/guohechuan/code/aurora/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJyZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUiOwppbXBvcnQgX2FzeW5jVG9HZW5lcmF0b3IgZnJvbSAiL1VzZXJzL2d1b2hlY2h1YW4vY29kZS9hdXJvcmEvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2FzeW5jVG9HZW5lcmF0b3IiOwppbXBvcnQgX29iamVjdFNwcmVhZCBmcm9tICIvVXNlcnMvZ3VvaGVjaHVhbi9jb2RlL2F1cm9yYS9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0U3ByZWFkMiI7Ci8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCmltcG9ydCB7IG1hcFN0YXRlIH0gZnJvbSAndnVleCc7CmltcG9ydCBUaGVtZSBmcm9tICcuL2NvbXBvbmVudHMvVGhlbWUnOwppbXBvcnQgUXJjb2RlIGZyb20gJy4vY29tcG9uZW50cy9RcmNvZGUnOwppbXBvcnQgeyBsb2NhbFNhdmUsIGxvY2FsUmVhZCB9IGZyb20gJ0AvdXRpbHMnOwppbXBvcnQgaW1hZ2VzIGZyb20gJ0AvYXNzZXRzL2ltYWdlcyc7CnZhciBiZyA9IGltYWdlcy5iZzsKZXhwb3J0IGRlZmF1bHQgewogIG5hbWU6ICdQYW5lbCcsCiAgY29tcG9uZW50czogewogICAgVGhlbWU6IFRoZW1lLAogICAgUXJjb2RlOiBRcmNvZGUKICB9LAogIGRhdGE6IGZ1bmN0aW9uIGRhdGEoKSB7CiAgICByZXR1cm4gewogICAgICB0aGVtZTogJycsCiAgICAgIGxpa2VUaW1lczogMCwKICAgICAgaXNMaWtlU2l0ZTogbG9jYWxSZWFkKCdpc0xpa2VTaXRlJywgZmFsc2UpLAogICAgICBjdXJyZW50SW54OiAxLAogICAgICBsb2NrU3dpcGVyOiBmYWxzZSwKICAgICAgem9vbVNyYzogJycKICAgIH07CiAgfSwKICBjb21wdXRlZDogX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBtYXBTdGF0ZSh7CiAgICBzaG93UGFuZWw6IGZ1bmN0aW9uIHNob3dQYW5lbChzdGF0ZSkgewogICAgICByZXR1cm4gc3RhdGUuc2hvd1BhbmVsOwogICAgfQogIH0pKSwge30sIHsKICAgIHBhbmVsVGl0bGU6IGZ1bmN0aW9uIHBhbmVsVGl0bGUoKSB7CiAgICAgIHZhciBpbnggPSAodGhpcy5jdXJyZW50SW54ICsgMSkgJSAyOwogICAgICByZXR1cm4gWyfog4zmma/kuLvpopgnLCAn6LWb6ZKx566xJ11baW54XTsKICAgIH0sCiAgICBkaXN0YW5jZTogZnVuY3Rpb24gZGlzdGFuY2UoKSB7CiAgICAgIHJldHVybiBbMCwgLTYwMCwgLTEyMDAsIC0xODAwXVt0aGlzLmN1cnJlbnRJbnhdOwogICAgfSwKICAgIGNvbnRhaW5lclN0eWxlOiBmdW5jdGlvbiBjb250YWluZXJTdHlsZSgpIHsKICAgICAgcmV0dXJuIHsKICAgICAgICB0cmFuc2Zvcm06ICJ0cmFuc2xhdGUzZCgiLmNvbmNhdCh0aGlzLmRpc3RhbmNlLCAicHgsIDAsIDApIikKICAgICAgfTsKICAgIH0sCiAgICBsaWtlQnRuVGV4dDogZnVuY3Rpb24gbGlrZUJ0blRleHQoKSB7CiAgICAgIHJldHVybiB0aGlzLmlzTGlrZVNpdGUgPyAi6LCi6LCi54K56LWeICjil48n4pehJ+KXjykiIDogJ+eCuei1nuS4gOS4iyAoPOOCnc+J44O7KeKYhic7CiAgICB9CiAgfSksCiAgd2F0Y2g6IHsKICAgICckaXNNb2JpbGUudmFsdWUnOiB7CiAgICAgIGltbWVkaWF0ZTogdHJ1ZSwKICAgICAgaGFuZGxlcjogZnVuY3Rpb24gaGFuZGxlcih2YWwpIHsKICAgICAgICBpZiAodmFsKSByZXR1cm47CiAgICAgICAgdGhpcy5pbml0VGhlbWUoKTsKICAgICAgfQogICAgfQogIH0sCiAgbW91bnRlZDogZnVuY3Rpb24gbW91bnRlZCgpIHsKICAgIHRoaXMucXVlcnlMaWtlKCk7CiAgfSwKICBtZXRob2RzOiB7CiAgICAvLyDngrnotZ7mlbAKICAgIHF1ZXJ5TGlrZTogZnVuY3Rpb24gcXVlcnlMaWtlKCkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZSgpIHsKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMjsKICAgICAgICAgICAgICAgIHJldHVybiBfdGhpcy4kc3RvcmUuZGlzcGF0Y2goJ3F1ZXJ5TGlrZScsICdnZXRUaW1lcycpOwoKICAgICAgICAgICAgICBjYXNlIDI6CiAgICAgICAgICAgICAgICBfdGhpcy5saWtlVGltZXMgPSBfY29udGV4dC5zZW50OwoKICAgICAgICAgICAgICBjYXNlIDM6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlKTsKICAgICAgfSkpKCk7CiAgICB9LAogICAgLy8g54K56LWeCiAgICBsaWtlU2l0ZTogZnVuY3Rpb24gbGlrZVNpdGUoKSB7CiAgICAgIHZhciBfdGhpczIgPSB0aGlzOwoKICAgICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTIoKSB7CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUyJChfY29udGV4dDIpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQyLnByZXYgPSBfY29udGV4dDIubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIGlmICghX3RoaXMyLmlzTGlrZVNpdGUpIHsKICAgICAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSAyOwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLmFicnVwdCgicmV0dXJuIik7CgogICAgICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gNDsKICAgICAgICAgICAgICAgIHJldHVybiBfdGhpczIuJHN0b3JlLmRpc3BhdGNoKCdxdWVyeUxpa2UnKTsKCiAgICAgICAgICAgICAgY2FzZSA0OgogICAgICAgICAgICAgICAgX3RoaXMyLmxpa2VUaW1lcyA9IF9jb250ZXh0Mi5zZW50OwogICAgICAgICAgICAgICAgX3RoaXMyLmlzTGlrZVNpdGUgPSB0cnVlOwogICAgICAgICAgICAgICAgbG9jYWxTYXZlKCdpc0xpa2VTaXRlJywgdHJ1ZSk7CgogICAgICAgICAgICAgIGNhc2UgNzoKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlMik7CiAgICAgIH0pKSgpOwogICAgfSwKICAgIC8vIOWIneWni+WMluiDjOaZr+S4u+mimAogICAgaW5pdFRoZW1lOiBmdW5jdGlvbiBpbml0VGhlbWUoKSB7CiAgICAgIGlmICh0aGlzLnRoZW1lKSByZXR1cm47CiAgICAgIHZhciB0aGVtZSA9IGxvY2FsUmVhZCgndGhlbWUnLCAndG91aG91Jyk7CiAgICAgIHRoaXMuc2V0VGhlbWUodGhlbWUpOwogICAgfSwKICAgIC8vIOWIh+aNouS4u+mimAogICAgc3dpdGNoVGhlbWU6IGZ1bmN0aW9uIHN3aXRjaFRoZW1lKHRoZW1lKSB7CiAgICAgIGlmICh0aGVtZSA9PT0gdGhpcy50aGVtZSkgcmV0dXJuOwogICAgICB0aGlzLnNldFRoZW1lKHRoZW1lKTsKICAgIH0sCiAgICAvLyDorr7nva7kuLvpopgKICAgIHNldFRoZW1lOiBmdW5jdGlvbiBzZXRUaGVtZSh0aGVtZSkgewogICAgICB0aGlzLnRoZW1lID0gdGhlbWU7CiAgICAgIGxvY2FsU2F2ZSgndGhlbWUnLCB0aGVtZSk7CiAgICAgIHdpbmRvdy4kKCcjYmcnKS5iYWNrc3RyZXRjaChiZ1t0aGVtZV0sIHsKICAgICAgICBkdXJhdGlvbjogMTAwMDAsCiAgICAgICAgYWxpZ25ZOiAwLAogICAgICAgIHRyYW5zaXRpb246ICdmYWRlJywKICAgICAgICB0cmFuc2l0aW9uRHVyYXRpb246IDEwMDAKICAgICAgfSk7CiAgICB9LAogICAgLy8g5YWz6Zet6Z2i5p2/CiAgICBoaWRlUGFuZWw6IGZ1bmN0aW9uIGhpZGVQYW5lbCgpIHsKICAgICAgdmFyIF90aGlzMyA9IHRoaXM7CgogICAgICB0aGlzLiRzdG9yZS5jb21taXQoJ3NldFNob3dQYW5lbCcsIGZhbHNlKTsKICAgICAgdGhpcy4kbmV4dFRpY2soZnVuY3Rpb24gKCkgewogICAgICAgIF90aGlzMy5jdXJyZW50SW54ID0gMTsKICAgICAgfSk7CiAgICB9LAogICAgLy8g5ruR5Yqo6Z2i5p2/CiAgICBzd2lwZXJUbzogZnVuY3Rpb24gc3dpcGVyVG8oZGlyZWN0aW9uKSB7CiAgICAgIHZhciBfdGhpczQgPSB0aGlzOwoKICAgICAgaWYgKHRoaXMubG9ja1N3aXBlcikgcmV0dXJuOwogICAgICB0aGlzLmxvY2tTd2lwZXIgPSB0cnVlOwogICAgICB2YXIgc3dpcGVyID0gdGhpcy4kcmVmcy5zd2lwZXI7CiAgICAgIHN3aXBlci5jbGFzc0xpc3QuYWRkKCdhbmltYXRlJyk7CiAgICAgIHRoaXMuY3VycmVudElueCArPSBkaXJlY3Rpb247CiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkgewogICAgICAgIF90aGlzNC5sb2NrU3dpcGVyID0gZmFsc2U7CgogICAgICAgIGlmIChfdGhpczQuY3VycmVudElueCA9PT0gMCkgewogICAgICAgICAgc3dpcGVyLmNsYXNzTGlzdC5yZW1vdmUoJ2FuaW1hdGUnKTsKICAgICAgICAgIF90aGlzNC5jdXJyZW50SW54ID0gMjsKICAgICAgICB9CgogICAgICAgIGlmIChfdGhpczQuY3VycmVudElueCA9PT0gMykgewogICAgICAgICAgc3dpcGVyLmNsYXNzTGlzdC5yZW1vdmUoJ2FuaW1hdGUnKTsKICAgICAgICAgIF90aGlzNC5jdXJyZW50SW54ID0gMTsKICAgICAgICB9CiAgICAgIH0sIDUwMCk7CiAgICB9LAogICAgLy8g6K6+572u57yp5pS+5LqM57u056CBCiAgICBzZXRab29tU3JjOiBmdW5jdGlvbiBzZXRab29tU3JjKCkgewogICAgICB2YXIgc3JjID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiAnJzsKICAgICAgdGhpcy56b29tU3JjID0gc3JjOwogICAgfQogIH0KfTs="},null]}