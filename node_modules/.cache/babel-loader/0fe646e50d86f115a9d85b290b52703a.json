{"remainingRequest":"/Users/guohechuan/code/aurora/node_modules/thread-loader/dist/cjs.js!/Users/guohechuan/code/aurora/node_modules/babel-loader/lib/index.js!/Users/guohechuan/code/aurora/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/guohechuan/code/aurora/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/guohechuan/code/aurora/src/views/Category/index.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/guohechuan/code/aurora/src/views/Category/index.vue","mtime":1626163653611},{"path":"/Users/guohechuan/code/aurora/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/guohechuan/code/aurora/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/guohechuan/code/aurora/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/guohechuan/code/aurora/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/guohechuan/code/aurora/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}