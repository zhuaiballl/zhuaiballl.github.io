{"remainingRequest":"/Users/guohechuan/code/aurora/node_modules/thread-loader/dist/cjs.js!/Users/guohechuan/code/aurora/node_modules/babel-loader/lib/index.js!/Users/guohechuan/code/aurora/node_modules/eslint-loader/index.js??ref--13-0!/Users/guohechuan/code/aurora/src/utils/services.js","dependencies":[{"path":"/Users/guohechuan/code/aurora/src/utils/services.js","mtime":1626163653610},{"path":"/Users/guohechuan/code/aurora/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/guohechuan/code/aurora/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/guohechuan/code/aurora/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/guohechuan/code/aurora/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}