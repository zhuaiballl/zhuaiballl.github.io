{"remainingRequest":"/Users/guohechuan/code/aurora/node_modules/babel-loader/lib/index.js!/Users/guohechuan/code/aurora/node_modules/eslint-loader/index.js??ref--13-0!/Users/guohechuan/code/aurora/src/utils/services.js","dependencies":[{"path":"/Users/guohechuan/code/aurora/src/utils/services.js","mtime":1626163653610},{"path":"/Users/guohechuan/code/aurora/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/guohechuan/code/aurora/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/guohechuan/code/aurora/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/guohechuan/code/aurora/src/utils/services.js"],"names":["AV","config","documents","GRAPHQL_URL","GITHUB_API","username","repository","token","blog","access_token","join","isDev","test","window","location","host","checkStatus","response","status","error","Error","statusText","githubFetch","url","isQueryPage","fetch","method","headers","Authorization","json","data","console","log","createCall","document","payload","JSON","stringify","query","body","queryArchivesCount","queryInspirationCount","queryFilterArchivesCount","label","milestone","queryPosts","page","pageSize","filter","queryPost","number","queryCategory","queryTag","queryInspiration","queryPage","type","upperType","replace","s","toUpperCase","queryHot","ids","Promise","resolve","Query","containedIn","find","then","res","hot","forEach","o","attributes","id","time","catch","increaseHot","post","Counter","Object","extend","title","equalTo","length","counter","increment","save","fetchWhenSave","get","newcounter","set","href","queryLike","first","visitorStatistics","referrer","Visitor","newVisitor"],"mappings":"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","sourcesContent":["import AV from 'leancloud-storage'\nimport config from '../config'\nimport documents from './documents'\n\nconst GRAPHQL_URL = 'https://api.github.com/graphql'\nconst GITHUB_API = 'https://api.github.com/repos'\n\nconst { username, repository, token } = config\nconst blog = `${GITHUB_API}/${username}/${repository}`\nconst access_token = `token ${token.join('')}`\nconst isDev = /^(192\\.168|localhost)/.test(window.location.host)\n\n// 状态检测\nconst checkStatus = (response) => {\n  if (response.status >= 200 && response.status < 300) return response\n  const error = new Error(response.statusText)\n  error.response = response\n  throw error\n}\n\n// github fetch\nconst githubFetch = async (url, isQueryPage = false) => {\n  try {\n    const response = await fetch(url, {\n      method: 'GET',\n      headers: {\n        Authorization: access_token,\n      },\n    })\n    checkStatus(response)\n    const data = await response.json()\n    return isQueryPage ? data[0] : data\n  } catch (error) {\n    console.log(error)\n  }\n}\n\n// 构建 GraphQL\nconst createCall = async (document) => {\n  try {\n    const payload = JSON.stringify({ query: document })\n    const response = await fetch(GRAPHQL_URL, {\n      method: 'POST',\n      headers: {\n        Authorization: access_token,\n      },\n      body: payload,\n    })\n    checkStatus(response)\n    const body = await response.json()\n    return body.data\n  } catch (err) {\n    console.log(err)\n  }\n}\n\n// 获取文章数量\nexport const queryArchivesCount = () => createCall(documents.queryArchivesCount({ username, repository }))\n\n// 获取灵感数量\nexport const queryInspirationCount = () => createCall(documents.queryInspirationCount({ username, repository }))\n\n// 按分类 & 标签筛选文章\nexport const queryFilterArchivesCount = ({ label, milestone }) =>\n  createCall(documents.queryFilterArchivesCount({ username, repository, label, milestone }))\n\n// 获取文章列表\nexport const queryPosts = ({ page = 1, pageSize = 10, filter = '' }) => {\n  const url = `${blog}/issues?state=open&page=${page}&per_page=${pageSize}${filter}`\n  return githubFetch(url)\n}\n\n// 获取单篇文章\nexport const queryPost = (number) => {\n  const url = `${blog}/issues/${number}?state=open`\n  return githubFetch(url)\n}\n\n// 获取分类\nexport const queryCategory = () => {\n  const url = `${blog}/milestones`\n  return githubFetch(url)\n}\n\n// 获取标签\nexport const queryTag = () => {\n  const url = `${blog}/labels?page=1&per_page=100`\n  return githubFetch(url)\n}\n\n// 获取灵感\nexport const queryInspiration = ({ page = 1, pageSize = 10 }) => {\n  const url = `${blog}/issues?state=closed&labels=inspiration&page=${page}&per_page=${pageSize}`\n  return githubFetch(url)\n}\n\n// 获取书单 & 友链 & 关于\nexport const queryPage = (type) => {\n  const upperType = type.replace(/^\\S/, (s) => s.toUpperCase())\n  const url = `${blog}/issues?state=closed&labels=${upperType}`\n  return githubFetch(url, true)\n}\n\n// 文章热度\nexport const queryHot = async (ids) => {\n  return new Promise((resolve) => {\n    if (isDev) return resolve([])\n    const query = new AV.Query('Counter')\n    query.containedIn('id', ids)\n    query\n      .find()\n      .then((res) => {\n        const hot = {}\n        res.forEach((o) => (hot[o.attributes.id] = o.attributes.time))\n        resolve(hot)\n      })\n      .catch(console.error)\n  }).catch(console.error)\n}\n\n// 增加热度\nexport const increaseHot = (post) => {\n  return new Promise((resolve) => {\n    if (isDev) return resolve(1)\n    const query = new AV.Query('Counter')\n    const Counter = AV.Object.extend('Counter')\n    const { title, id } = post\n    query.equalTo('id', id)\n    query\n      .find()\n      .then((res) => {\n        if (res.length > 0) {\n          // 已存在则返回热度\n          const counter = res[0]\n          counter\n            .increment('time', 1)\n            .save(null, { fetchWhenSave: true })\n            .then((counter) => {\n              const time = counter.get('time')\n              resolve(time)\n            })\n            .catch(console.error)\n        } else {\n          // 不存在则新建\n          const newcounter = new Counter()\n          newcounter.set('title', title)\n          newcounter.set('id', id)\n          newcounter.set('time', 1)\n          newcounter.set('site', location.href)\n          newcounter\n            .save()\n            .then(() => resolve(1))\n            .catch(console.error)\n        }\n      })\n      .catch(console.error)\n  }).catch(console.error)\n}\n\n// Nya~~\nexport const queryLike = async (type) => {\n  return new Promise((resolve) => {\n    if (isDev) return resolve(0)\n    const query = new AV.Query('Counter')\n    const Counter = AV.Object.extend('Counter')\n    query.equalTo('title', 'site')\n    query\n      .first()\n      .then((res) => {\n        if (res) {\n          if (type === 'getTimes') {\n            resolve(res.get('time'))\n          } else {\n            res\n              .increment('time', 1)\n              .save(null, { fetchWhenSave: true })\n              .then((counter) => resolve(counter.get('time')))\n              .catch(console.error)\n          }\n        } else {\n          const newcounter = new Counter()\n          newcounter.set('title', 'site')\n          newcounter.set('time', 1)\n          newcounter.set('site', location.href)\n          newcounter\n            .save()\n            .then((counter) => resolve(counter.get('time')))\n            .catch(console.error)\n        }\n      })\n      .catch(console.error)\n  }).catch(console.error)\n}\n\n// 访问来源\nexport const visitorStatistics = async (referrer) => {\n  return new Promise((resolve) => {\n    if (isDev) return resolve()\n    const query = new AV.Query('Visitor')\n    const Visitor = AV.Object.extend('Visitor')\n    query.equalTo('referrer', referrer)\n    query\n      .first()\n      .then((res) => {\n        if (res) {\n          res\n            .increment('time', 1)\n            .save(null, { fetchWhenSave: true })\n            .then(() => resolve())\n            .catch(console.error)\n        } else {\n          const newVisitor = new Visitor()\n          newVisitor.set('referrer', referrer)\n          newVisitor.set('time', 1)\n          newVisitor\n            .save()\n            .then(() => resolve())\n            .catch(console.error)\n        }\n      })\n      .catch(console.error)\n  }).catch(console.error)\n}\n"]}]}