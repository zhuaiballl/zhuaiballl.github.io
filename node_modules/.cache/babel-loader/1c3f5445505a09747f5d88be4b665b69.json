{"remainingRequest":"/Users/guohechuan/code/aurora/node_modules/thread-loader/dist/cjs.js!/Users/guohechuan/code/aurora/node_modules/babel-loader/lib/index.js!/Users/guohechuan/code/aurora/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/guohechuan/code/aurora/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/guohechuan/code/aurora/src/components/MarkDown/index.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/guohechuan/code/aurora/src/components/MarkDown/index.vue","mtime":1626163653606},{"path":"/Users/guohechuan/code/aurora/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/guohechuan/code/aurora/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/guohechuan/code/aurora/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/guohechuan/code/aurora/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/guohechuan/code/aurora/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuY29uY2F0IjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZm9yLWVhY2giOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5yZWdleHAuZXhlYyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5tYXRjaCI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL3dlYi5kb20tY29sbGVjdGlvbnMuZm9yLWVhY2giOwovLwovLwovLwovLwppbXBvcnQgX21hcmtlZCBmcm9tICdtYXJrZWQnOwppbXBvcnQgWm9vbWluZyBmcm9tICd6b29taW5nJzsKaW1wb3J0IENsaXBib2FyZEpTIGZyb20gJ2NsaXBib2FyZCc7CmltcG9ydCBrYXRleCBmcm9tICdrYXRleCc7CmltcG9ydCBobGpzIGZyb20gJ0AvYXNzZXRzL2xpYi9oaWdobGlnaHQnOwppbXBvcnQgeyBmaWxlQ0ROLCBoYW5kbGVJbWcgfSBmcm9tICdAL3V0aWxzJzsKCmZ1bmN0aW9uIG1hdGhzRXhwcmVzc2lvbihleHByKSB7CiAgaWYgKGV4cHIubWF0Y2goL15cJFwkW1xzXFNdKlwkXCQkLykpIHsKICAgIGV4cHIgPSBleHByLnN1YnN0cigyLCBleHByLmxlbmd0aCAtIDQpOwogICAgcmV0dXJuIGthdGV4LnJlbmRlclRvU3RyaW5nKGV4cHIsIHsKICAgICAgZGlzcGxheU1vZGU6IHRydWUKICAgIH0pOwogIH0gZWxzZSBpZiAoZXhwci5tYXRjaCgvXlwkW1xzXFNdKlwkJC8pKSB7CiAgICBleHByID0gZXhwci5zdWJzdHIoMSwgZXhwci5sZW5ndGggLSAyKTsKICAgIHJldHVybiBrYXRleC5yZW5kZXJUb1N0cmluZyhleHByLCB7CiAgICAgIGlzcGxheU1vZGU6IGZhbHNlCiAgICB9KTsKICB9Cn0KCnZhciB6b29taW5nID0gbmV3IFpvb21pbmcoewogIGJnT3BhY2l0eTogMC44LAogIHpJbmRleDogMTAwCn0pOwp2YXIgSU1HX0lEID0gMDsKdmFyIENPREVfSUQgPSAwOwp2YXIgQ09ERV9DT1BZX0xJU1QgPSBbXTsKdmFyIHJlbmRlcmVyID0gbmV3IF9tYXJrZWQuUmVuZGVyZXIoKTsKCnJlbmRlcmVyLmhlYWRpbmcgPSBmdW5jdGlvbiAodGV4dCwgbGV2ZWwsIHJhdywgc2x1Z2dlcikgewogIHZhciBpY29uID0gWydnaWZ0JywgJ3BhZ2VsaW5lcycsICdwaWxjcm93J11bbGV2ZWwgLSAyXTsKICByZXR1cm4gIjxoIi5jb25jYXQobGV2ZWwsICIgaWQ9XCJoLSIpLmNvbmNhdChzbHVnZ2VyLnNsdWcocmF3KSwgIlwiPjxpIGNsYXNzPVwiaWNvbiBpY29uLSIpLmNvbmNhdChpY29uLCAiXCI+PC9pPiIpLmNvbmNhdCh0ZXh0LCAiPC9oIikuY29uY2F0KGxldmVsLCAiPiIpOwp9OwoKcmVuZGVyZXIuaW1hZ2UgPSBmdW5jdGlvbiAoaHJlZiwgdGl0bGUsIHRleHQpIHsKICBJTUdfSUQrKzsKICB2YXIgaWQgPSAiaW1nLSIuY29uY2F0KElNR19JRCk7CiAgdmFyIGNkbkhyZWYgPSBmaWxlQ0ROKGhyZWYpOwogIHZhciBpbWcgPSBuZXcgSW1hZ2UoKTsKICBpbWcuc3JjID0gY2RuSHJlZjsKCiAgdmFyIGNvbXBlbGV0ZSA9IGZ1bmN0aW9uIGNvbXBlbGV0ZShpc1N1Y2Nlc3MpIHsKICAgIHZhciBkb20gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChpZCk7CiAgICBkb20uc3JjID0gaXNTdWNjZXNzID8gY2RuSHJlZiA6IGhyZWY7CiAgICBkb20uc3R5bGUub3BhY2l0eSA9IDE7CiAgfTsKCiAgaW1nLm9ubG9hZCA9IGZ1bmN0aW9uICgpIHsKICAgIHJldHVybiBjb21wZWxldGUodHJ1ZSk7CiAgfTsKCiAgaW1nLm9uZXJyb3IgPSBmdW5jdGlvbiAoKSB7CiAgICByZXR1cm4gY29tcGVsZXRlKGZhbHNlKTsKICB9OwoKICB2YXIgX2hhbmRsZUltZyA9IGhhbmRsZUltZyhjZG5IcmVmKSwKICAgICAgc3R5bGUgPSBfaGFuZGxlSW1nLnN0eWxlLAogICAgICBpc0Z1bGwgPSBfaGFuZGxlSW1nLmlzRnVsbDsKCiAgcmV0dXJuICI8c3BhbiBjbGFzcz1cImltZy1ib3ggIi5jb25jYXQoaXNGdWxsID8gJ2Z1bGwnIDogJycsICJcIj5cbiAgPHNwYW4gY2xhc3M9XCJiZ1wiIHN0eWxlPVwiIikuY29uY2F0KHN0eWxlLCAiXCI+XG4gICAgPHNwYW4gY2xhc3M9XCJsb2FkaW5nXCI+XG4gICAgICA8c3BhbiBjbGFzcz1cImRvdFwiPjwvc3Bhbj48c3BhbiBjbGFzcz1cImRvdFwiPjwvc3Bhbj48c3BhbiBjbGFzcz1cImRvdFwiPjwvc3Bhbj48c3BhbiBjbGFzcz1cImRvdFwiPjwvc3Bhbj48c3BhbiBjbGFzcz1cImRvdFwiPjwvc3Bhbj5cbiAgICA8L3NwYW4+XG4gIDwvc3Bhbj5cbiAgPGltZyBpZD1cIiIpLmNvbmNhdChpZCwgIlwiIGNsYXNzPVwiaW1nLXpvb21hYmxlIGN1cnNvclwiIHN0eWxlPVwiIikuY29uY2F0KHN0eWxlLCAiXCIgIGxvYWRpbmc9XCJsYXp5XCIgYWx0PVwiIikuY29uY2F0KHRleHQsICJcIiAvPiIpLmNvbmNhdCh0ZXh0ID8gIjxzcGFuIGNsYXNzPVwidGl0bGVcIj5cdTI1RUQgIi5jb25jYXQodGV4dCwgIjwvc3Bhbj4iKSA6ICcnLCAiPC9zcGFuPiIpOwp9OwoKcmVuZGVyZXIudGFibGUgPSBmdW5jdGlvbiAoaGVhZGVyLCBib2R5KSB7CiAgaWYgKGJvZHkpIGJvZHkgPSAiPHRib2R5PiIuY29uY2F0KGJvZHksICI8L3Rib2R5PiIpOwogIHJldHVybiAiPGRpdiBjbGFzcz1cInRhYmxlLXdyYXBwZXJcIj5cbjx0YWJsZT5cbjx0aGVhZD5cbiIuY29uY2F0KGhlYWRlciwgIjwvdGhlYWQ+XG4iKS5jb25jYXQoYm9keSwgIjwvdGFibGU+XG48L2Rpdj5cbiIpOwp9OwoKdmFyIHJlbmRlcmVyQ29kZXNwYW4gPSByZW5kZXJlci5jb2Rlc3BhbjsKCnJlbmRlcmVyLmNvZGVzcGFuID0gZnVuY3Rpb24gKHRleHQpIHsKICB2YXIgbWF0aCA9IG1hdGhzRXhwcmVzc2lvbih0ZXh0KTsKCiAgaWYgKG1hdGgpIHsKICAgIHJldHVybiBtYXRoOwogIH0KCiAgcmV0dXJuIHJlbmRlcmVyQ29kZXNwYW4odGV4dCk7Cn07Cgp2YXIgcmVuZGVyZXJDb2RlID0gcmVuZGVyZXIuY29kZTsKCnJlbmRlcmVyLmNvZGUgPSBmdW5jdGlvbiBjb2RlKF9jb2RlLCBpbmZvc3RyaW5nLCBlc2NhcGVkKSB7CiAgLy8ga2F0ZXgg5pSv5oyB77yMIGh0dHBzOi8vZ2l0aHViLmNvbS9tYXJrZWRqcy9tYXJrZWQvaXNzdWVzLzE1MzgjaXNzdWVjb21tZW50LTUyNjE4OTU2MQogIGlmICghbGFuZykgewogICAgdmFyIG1hdGggPSBtYXRoc0V4cHJlc3Npb24oX2NvZGUpOwoKICAgIGlmIChtYXRoKSB7CiAgICAgIHJldHVybiBtYXRoOwogICAgfQogIH0KCiAgQ09ERV9JRCsrOwogIHZhciBpZCA9ICJjb2RlLSIuY29uY2F0KENPREVfSUQpOwogIENPREVfQ09QWV9MSVNULnB1c2goewogICAgaWQ6IGlkLAogICAgY29kZTogX2NvZGUKICB9KTsKICB2YXIgbGFuZyA9IChpbmZvc3RyaW5nIHx8ICcnKS5tYXRjaCgvXFMqLylbMF07CgogIGlmICh0aGlzLm9wdGlvbnMuaGlnaGxpZ2h0KSB7CiAgICB2YXIgb3V0ID0gdGhpcy5vcHRpb25zLmhpZ2hsaWdodChfY29kZSwgbGFuZyk7CgogICAgaWYgKG91dCAhPSBudWxsICYmIG91dCAhPT0gX2NvZGUpIHsKICAgICAgZXNjYXBlZCA9IHRydWU7CiAgICAgIF9jb2RlID0gb3V0OwogICAgfQogIH0KCiAgaWYgKCFsYW5nKSB7CiAgICByZXR1cm4gIjxwcmU+PGNvZGU+Ii5jb25jYXQoX2NvZGUsICI8L2NvZGU+PGkgaWQ9XCIiKS5jb25jYXQoaWQsICJcIiBjbGFzcz1cImljb24gaWNvbi1jbGlwYm9hcmQgY29kZS1jb3B5XCI+PC9pPjwvcHJlPiIpOwogIH0KCiAgcmV0dXJuICI8cHJlPjxjb2RlIGNsYXNzPVwiIi5jb25jYXQodGhpcy5vcHRpb25zLmxhbmdQcmVmaXggKyBsYW5nLCAiXCI+IikuY29uY2F0KF9jb2RlLCAiPC9jb2RlPjxpIGlkPVwiIikuY29uY2F0KGlkLCAiXCIgY2xhc3M9XCJpY29uIGljb24tY2xpcGJvYXJkIGNvZGUtY29weVwiPjwvaT48L3ByZT5cbiIpOwp9OwoKX21hcmtlZC5zZXRPcHRpb25zKHsKICByZW5kZXJlcjogcmVuZGVyZXIsCiAgaGlnaGxpZ2h0OiBmdW5jdGlvbiBoaWdobGlnaHQoY29kZSkgewogICAgcmV0dXJuIGhsanMuaGlnaGxpZ2h0QXV0byhjb2RlKS52YWx1ZTsKICB9Cn0pOwoKZXhwb3J0IGRlZmF1bHQgewogIG5hbWU6ICdNYXJrRG93bicsCiAgcHJvcHM6IHsKICAgIGNvbnRlbnQ6IHsKICAgICAgdHlwZTogU3RyaW5nLAogICAgICBkZWZhdWx0OiAnJwogICAgfSwKICAgIHRhcmdldDogewogICAgICB0eXBlOiBTdHJpbmcsCiAgICAgIGRlZmF1bHQ6ICcnCiAgICB9CiAgfSwKICBkYXRhOiBmdW5jdGlvbiBkYXRhKCkgewogICAgcmV0dXJuIHsKICAgICAgaHRtbDogJycsCiAgICAgIGNsaXBib2FyZHM6IFtdCiAgICB9OwogIH0sCiAgY3JlYXRlZDogZnVuY3Rpb24gY3JlYXRlZCgpIHsKICAgIHRoaXMubWFya2VkKCk7CiAgfSwKICB3YXRjaDogewogICAgY29udGVudDogZnVuY3Rpb24gY29udGVudCgpIHsKICAgICAgdGhpcy5tYXJrZWQoKTsKICAgIH0KICB9LAogIG1ldGhvZHM6IHsKICAgIG1hcmtlZDogZnVuY3Rpb24gbWFya2VkKCkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgdGhpcy5DT0RFX0NPUFlfTElTVCA9IFtdOwogICAgICB0aGlzLmh0bWwgPSBfbWFya2VkKHRoaXMuY29udGVudCk7IC8vIOWvueS6juWPquaYr+e6r+ino+aekOaWh+Wtl+S4jemcgOimgeS7o+eggemrmOS6ruWSjOeBr+eusQoKICAgICAgaWYgKCF0aGlzLnRhcmdldCkgcmV0dXJuOwogICAgICB0aGlzLiRuZXh0VGljayhmdW5jdGlvbiAoKSB7CiAgICAgICAgaGxqcy5pbml0TGluZU51bWJlcnNPbkxvYWQoewogICAgICAgICAgdGFyZ2V0OiBfdGhpcy50YXJnZXQKICAgICAgICB9KTsKICAgICAgICB6b29taW5nLmxpc3RlbignLmltZy16b29tYWJsZScpOwoKICAgICAgICBfdGhpcy5iaW5kQ29kZUNvcHkoKTsKICAgICAgfSk7CiAgICB9LAogICAgYmluZENvZGVDb3B5OiBmdW5jdGlvbiBiaW5kQ29kZUNvcHkoKSB7CiAgICAgIHZhciBfdGhpczIgPSB0aGlzOwoKICAgICAgQ09ERV9DT1BZX0xJU1QuZm9yRWFjaChmdW5jdGlvbiAobykgewogICAgICAgIHZhciBjbGlwYm9hcmQgPSBuZXcgQ2xpcGJvYXJkSlMoJyMnICsgby5pZCwgewogICAgICAgICAgdGV4dDogZnVuY3Rpb24gdGV4dCh0cmlnZ2VyKSB7CiAgICAgICAgICAgIHJldHVybiBvLmNvZGU7CiAgICAgICAgICB9CiAgICAgICAgfSk7CgogICAgICAgIF90aGlzMi5jbGlwYm9hcmRzLnB1c2goY2xpcGJvYXJkKTsKICAgICAgfSk7CiAgICB9LAogICAgdW5CaW5kQ29kZUNvcHk6IGZ1bmN0aW9uIHVuQmluZENvZGVDb3B5KCkgewogICAgICB0aGlzLmNsaXBib2FyZHMuZm9yRWFjaChmdW5jdGlvbiAobykgewogICAgICAgIG8uZGVzdHJveSgpOwogICAgICB9KTsKICAgIH0KICB9LAogIGJlZm9yZURlc3Ryb3k6IGZ1bmN0aW9uIGJlZm9yZURlc3Ryb3koKSB7CiAgICB6b29taW5nLmNsb3NlKCk7CiAgICB0aGlzLnVuQmluZENvZGVDb3B5KCk7CiAgfQp9Ow=="},null]}